[{"D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\index.js":"1","D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\reportWebVitals.js":"2","D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\App.js":"3","D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\apps\\Nav.js":"4","D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\apps\\AddProduct.js":"5","D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\apps\\ProductDetails.js":"6","D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\apps\\AppConfig.js":"7","D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\apps\\EditProduct.js":"8"},{"size":600,"mtime":1621007993643,"results":"9","hashOfConfig":"10"},{"size":364,"mtime":1620839232904,"results":"11","hashOfConfig":"10"},{"size":89,"mtime":1620948029764,"results":"12","hashOfConfig":"10"},{"size":10954,"mtime":1621202265084,"results":"13","hashOfConfig":"10"},{"size":6235,"mtime":1621201313822,"results":"14","hashOfConfig":"10"},{"size":5348,"mtime":1621202387096,"results":"15","hashOfConfig":"10"},{"size":430,"mtime":1620931244207,"results":"16","hashOfConfig":"10"},{"size":9182,"mtime":1621201545402,"results":"17","hashOfConfig":"10"},{"filePath":"18","messages":"19","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1ch3jnb",{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"24","messages":"25","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"26"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"29","messages":"30","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"31","messages":"32","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\index.js",[],"D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\reportWebVitals.js",[],"D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\App.js",[],"D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\apps\\Nav.js",["35"],"import React, { Component } from 'react';\r\nimport AddProduct from './AddProduct';\r\nimport ProductDetails from './ProductDetails';\r\nimport http from './AppConfig';\r\nimport EditProduct from './EditProduct';\r\nimport Dialog from 'react-bootstrap-dialog';\r\n\r\n//declare api-end points to be used in the application\r\nconst _ = require('lodash');\r\nconst CATEGORIES_ENDPOINT = '/productCategories';\r\nconst PRODUCTS_ENDPOINT = '/products';\r\nconst SKU_ENDPOINT = '/sku';\r\nconst ATTRIBUTES_ENDPOINT = '/productAttributes';\r\n//this is the main parent component\r\nclass Nav extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    //set states\r\n    this.state = {\r\n      categories: [],\r\n      products: [],\r\n      skus: [],\r\n      attributes: [],\r\n      selectedCategoryId: null,\r\n      showEdit: false,\r\n      showAdd: false,\r\n      showProductDetails: false,\r\n      error: null,\r\n      response: {},\r\n      productData: {},\r\n      attributesData: [],\r\n      isAddProduct: false,\r\n      isEditProduct: false,\r\n    };\r\n    //bind functions\r\n    this.onFormSubmit = this.onFormSubmit.bind(this);\r\n    this.onSelectCategory = this.onSelectCategory.bind(this);\r\n    this.showAddModal = this.showAddModal.bind(this);\r\n    this.showEditModal = this.showEditModal.bind(this);\r\n    this.hideModal = this.hideModal.bind(this);\r\n    this.editProduct = this.editProduct.bind(this);\r\n    this.deleteProductDialog = this.deleteProductDialog.bind(this);\r\n    this.productDetails = this.productDetails.bind(this);\r\n    this.loadData = this.loadData.bind(this);\r\n  }\r\n  //call backend api to load data\r\n  loadData() {\r\n    //load categories\r\n    http\r\n      .get(CATEGORIES_ENDPOINT)\r\n      .then((response) => response.data)\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            categories: result,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({ error });\r\n        },\r\n      );\r\n    //load products\r\n    http\r\n      .get(PRODUCTS_ENDPOINT)\r\n      .then((response) => response.data)\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            products: result,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({ error });\r\n        },\r\n      );\r\n    //load SKUs\r\n    http\r\n      .get(SKU_ENDPOINT)\r\n      .then((response) => response.data)\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            skus: result,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({ error });\r\n        },\r\n      );\r\n    //load attributes\r\n    http\r\n      .get(ATTRIBUTES_ENDPOINT)\r\n      .then((response) => response.data)\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            attributes: result,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({ error });\r\n        },\r\n      );\r\n  }\r\n  componentWillMount() {\r\n    //load data\r\n    this.loadData();\r\n  }\r\n  //handles data on submit for save and edit\r\n  onFormSubmit(data) {\r\n    const { products } = this.state;\r\n    //check if submit action is save or edit\r\n    if (this.state.isEditProduct) {\r\n      //edit action\r\n      this.dialog.show({\r\n        body: 'Edit product?',\r\n        actions: [\r\n          Dialog.CancelAction(() => {}),\r\n          Dialog.OKAction(() => {\r\n            this.setState({\r\n              isAddProduct: false,\r\n              isEditProduct: false,\r\n            });\r\n\r\n            http.put('/products/' + data.Id, data).then((result) => {\r\n              this.setState({\r\n                response: result,\r\n                isAddProduct: false,\r\n                isEditProduct: false,\r\n              });\r\n            });\r\n            this.loadData();\r\n          }),\r\n        ],\r\n      });\r\n    } else {\r\n      //add action\r\n      this.dialog.show({\r\n        body: 'Add product?',\r\n        actions: [\r\n          Dialog.CancelAction(() => {}),\r\n          Dialog.OKAction(() => {\r\n            this.setState({\r\n              isAddProduct: false,\r\n              isEditProduct: false,\r\n            });\r\n            http.post('/products', data).then((result) => {\r\n              this.setState({\r\n                response: result,\r\n                isAddProduct: false,\r\n                isEditProduct: false,\r\n              });\r\n            });\r\n            this.loadData();\r\n          }),\r\n        ],\r\n      });\r\n    }\r\n  }\r\n\r\n  editProduct(Id) {\r\n    //prepopulate edit form\r\n    http\r\n      .get('/productsById/' + Id)\r\n      .then((response) => response.data)\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            productData: result,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({ error });\r\n        },\r\n      );\r\n  }\r\n  //loads categories on click\r\n  onSelectCategory(Id) {\r\n    this.setState({\r\n      selectedCategoryId: Id,\r\n    });\r\n  }\r\n  //loads add product form\r\n  showAddModal() {\r\n    this.setState({ showAdd: true, isAddProduct: true });\r\n  }\r\n  //loads product edit form\r\n  showEditModal(Id) {\r\n    this.setState({\r\n      showEdit: true,\r\n      isEditProduct: true,\r\n    });\r\n\r\n    this.editProduct(Id);\r\n  }\r\n  //loads product details form\r\n  productDetails(Id) {\r\n    this.setState({\r\n      showProductDetails: true,\r\n    });\r\n    //loads attributes\r\n    http\r\n      .get('/attributesData/' + Id)\r\n      .then((response) => response.data)\r\n      .then(\r\n        (result) => {\r\n          this.setState({\r\n            attributesData: result,\r\n          });\r\n        },\r\n        (error) => {\r\n          this.setState({ error });\r\n        },\r\n      );\r\n    this.editProduct(Id);\r\n  }\r\n  //deletes product\r\n  deleteProductDialog(Id) {\r\n    const { products } = this.state;\r\n    this.dialog.show({\r\n      body: 'Delete product?',\r\n      actions: [\r\n        Dialog.CancelAction(() => {}),\r\n        Dialog.OKAction(() => {\r\n          http.delete('/products/' + Id).then((result) => {\r\n            this.setState({\r\n              response: result,\r\n              products: products.filter((prod) => prod.ProductId !== Id),\r\n            });\r\n          });\r\n        }),\r\n      ],\r\n    });\r\n  }\r\n  //unloads/hides modal component\r\n  hideModal() {\r\n    this.setState({\r\n      showAdd: false,\r\n      showEdit: false,\r\n      showProductDetails: false,\r\n    });\r\n  }\r\n  //render this main component\r\n  render() {\r\n    const {\r\n      attributes,\r\n      skus,\r\n      categories,\r\n      products,\r\n      selectedCategoryId,\r\n      showAdd,\r\n      showEdit,\r\n      productData,\r\n      attributesData,\r\n      showProductDetails,\r\n    } = this.state;\r\n    //load first category if none is selected\r\n    const defaultCategory = _.first(categories);\r\n    //load selected category\r\n    const selectedCategory =\r\n      _.find(categories, (i) => i.Id === selectedCategoryId) || defaultCategory;\r\n    return (\r\n      <div>\r\n        <div className=\"header\"></div>\r\n        <div className=\"topnav\"></div>\r\n        <br />\r\n\r\n        <div className=\"row\">\r\n          <div className=\"col-sm-3\">\r\n            <CategoryFilter\r\n              categories={categories}\r\n              onSelectCategory={this.onSelectCategory}\r\n            />\r\n          </div>\r\n\r\n          <div className=\"col-sm-9\">\r\n            <ProductList\r\n              products={products}\r\n              selectedCategory={selectedCategory}\r\n              showEditModal={this.showEditModal}\r\n              deleteProductDialog={this.deleteProductDialog}\r\n              productDetails={this.productDetails}\r\n              defaultCategory={defaultCategory}\r\n            />\r\n\r\n            <AddProduct\r\n              showAdd={showAdd}\r\n              handleClose={this.hideModal}\r\n              categories={categories}\r\n              skus={skus}\r\n              attributes={attributes}\r\n              products={products}\r\n              onFormSubmit={this.onFormSubmit}\r\n            ></AddProduct>\r\n            <EditProduct\r\n              showEdit={showEdit}\r\n              handleClose={this.hideModal}\r\n              categories={categories}\r\n              skus={skus}\r\n              attributes={attributes}\r\n              products={products}\r\n              productData={productData}\r\n              attributesData={attributesData}\r\n              onFormSubmit={this.onFormSubmit}\r\n            ></EditProduct>\r\n            <ProductDetails\r\n              showProductDetails={showProductDetails}\r\n              handleClose={this.hideModal}\r\n              productData={productData}\r\n              attributesData={attributesData}\r\n            ></ProductDetails>\r\n\r\n            <Dialog\r\n              ref={(component) => {\r\n                this.dialog = component;\r\n              }}\r\n            />\r\n            <button\r\n              className=\"btn btn-primary btn-sm\"\r\n              onClick={this.showAddModal}\r\n            >\r\n              Add Product\r\n            </button>\r\n          </div>\r\n          <div className=\"row:after\">\r\n            <div className=\"footer\"></div>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n/**Category Component */\r\nvar CategoryFilter = ({ categories, onSelectCategory }) => {\r\n  const links = categories.map((i) => (\r\n    <div key={i.Id}>\r\n      <button\r\n        className=\"btn btn-secondary btn-block\"\r\n        onClick={() => onSelectCategory(i.Id)}\r\n      >\r\n        {i.CategoryName}\r\n      </button>\r\n      <br />\r\n    </div>\r\n  ));\r\n  return <div>{links}</div>;\r\n};\r\n/*** Product component */\r\nvar ProductList = ({\r\n  products,\r\n  selectedCategory,\r\n  showEditModal,\r\n  deleteProductDialog,\r\n  productDetails,\r\n  defaultCategory,\r\n}) => {\r\n  var count = 1;\r\n  //filter current products on selection of category\r\n  const currentProducts = products\r\n    .filter((i) => i.CategoryId === (selectedCategory.Id || defaultCategory.Id))\r\n    .map((i) => (\r\n      <tr key={i.ProductId}>\r\n        <td>{count++}</td>\r\n        <td>{i.ProductName}</td>\r\n        <td>{i.CategoryName}</td>\r\n        <td>{i.SkuName}</td>\r\n        <td>{i.Price}</td>\r\n\r\n        <td>\r\n          <button\r\n            className=\"btn btn-info py-0 btn-sm\"\r\n            onClick={() => showEditModal(i.ProductId)}\r\n          >\r\n            Edit\r\n          </button>\r\n          |\r\n          <button\r\n            className=\"btn btn-primary py-0 btn-sm\"\r\n            onClick={() => productDetails(i.ProductId)}\r\n          >\r\n            Details\r\n          </button>\r\n          |\r\n          <button\r\n            className=\"btn btn-danger py-0 btn-sm\"\r\n            onClick={() => deleteProductDialog(i.ProductId)}\r\n          >\r\n            Delete\r\n          </button>\r\n        </td>\r\n      </tr>\r\n    ));\r\n  return (\r\n    <div>\r\n      <table className=\"table table-striped table-sm table-success table-bordered\">\r\n        <tbody>\r\n          <tr>\r\n            <th></th>\r\n            <th>Product Name</th>\r\n            <th>Category Name</th>\r\n            <th>SKU</th>\r\n            <th>Price</th>\r\n\r\n            <th></th>\r\n          </tr>\r\n          {currentProducts}\r\n        </tbody>\r\n      </table>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Nav;\r\n","D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\apps\\AddProduct.js",[],"D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\apps\\ProductDetails.js",[],"D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\apps\\AppConfig.js",[],"D:\\resources\\tarmac\\tovuti\\productappfrontend\\src\\apps\\EditProduct.js",[],{"ruleId":"36","severity":1,"message":"37","line":111,"column":13,"nodeType":"38","messageId":"39","endLine":111,"endColumn":21},"no-unused-vars","'products' is assigned a value but never used.","Identifier","unusedVar"]